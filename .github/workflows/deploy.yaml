name: Deploy to PyPi
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Build Wheels and Package 🛠️
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install Poetry
        run: python -m pip install poetry
      - name: Build Module
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          if-no-files-found: error
          name: python-package-distributions
          path: dist/
  publish_test:
    name: Publish to TestPyPi 🧪
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: test_pypi
      url: https://test.pypi.org/p/simvue-fds
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to TestPyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
  publish:
    name: Publish to PyPi 🐍📦
    needs:
      - publish_test
    if: "!contains(github.ref, 'rc') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')"
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/simvue-fds
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
  github-release:
    name: Create Signed GitHub Release 🔏
    needs:
      - publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          LATESTCHANGES=$(awk '
            BEGIN { header_found = 0 }
            /^## / {
                if (header_found == 0) {
                    header = $0
                    header_found = 1
                    next
                } else {
                  exit
                }
            }
            header_found == 1 && /^\* / { print }
          ' CHANGELOG.md)
          gh release create
          '${{ github.ref_name }}'
          --notes "$LATESTCHANGES"
          --title 'FDS Connector ${{ github.ref_name }}'
          --repo '${{ github.repository }}'
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
      - name: Create a Zip of example results for docs example
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: 'example_results.zip'
          path: 'examples/example_results'
      - name: Upload example zip file
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "example_results.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
  publish_to_docker_registry:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: simvue-io/fds_example
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
